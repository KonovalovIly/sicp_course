(define (queens board-size)
  (define empty-board '())
  (define (adjoin-position new-row k rest-of-queens)
    (cons new-row rest-of-queens))
  (define (safe? k positions)
    (let ((new-row (car positions)))
      (define (iter check-col remaining)
        (if (null? remaining)
            #t
            (let ((current-row (car remaining)))
              (if (or (= current-row new-row)
                      (= (abs (- new-row current-row))
                         (abs (- k check-col))))
                  #f
                  (iter (+ check-col 1) (cdr remaining)))))
      (iter 1 (cdr positions))))
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter (lambda (positions) (safe? k positions))
                (flatmap (lambda (rest-of-queens)
                           (map (lambda (new-row)
                                  (adjoin-position new-row k rest-of-queens))
                                (enumerate-interval 1 board-size)))
                         (queen-cols (- k 1))))))
  (queen-cols board-size)))

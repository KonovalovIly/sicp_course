(define (lookup-variable-value var env)
  (define (scan bindings)
    (cond ((null? bindings)
           (lookup-variable-value var (enclosing-environment env)))
          ((eq? var (binding-variable (car bindings)))
           (let ((val (binding-value (car bindings))))
             (if (eq? val '*unassigned*)
                 (error "Unassigned variable" var)
                 val))
          (else (scan (cdr bindings))))))
  (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (scan (frame-bindings (first-frame env)))))

(define (scan-out-defines body)
  (let ((defines (filter definition? body))
        (other-exps (filter (lambda (exp) (not (definition? exp))) body)))
    (if (null? defines)
        body
        (let ((vars (map definition-variable defines))
              (vals (map definition-value defines)))
          (list (make-let (map (lambda (var) (list var ''*unassigned*)) vars)
                         (append (map (lambda (var val) (list 'set! var val)) vars vals)
                                 other-exps)))))))

(define (make-procedure parameters body env)
  (list 'procedure parameters (scan-out-defines body) env))
